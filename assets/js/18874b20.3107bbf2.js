"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1075],{1229:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2020/03/14/restassured-okhttp","metadata":{"permalink":"/website/blog/2020/03/14/restassured-okhttp","editUrl":"https://github.com/WasiqBhamla/website/edit/main/blog/blog/2020-03-14-restassured-okhttp/index.md","source":"@site/blog/2020-03-14-restassured-okhttp/index.md","title":"How to write API Tests using REST-Assured and OkHttp?","description":"What is REST-Assured?","date":"2020-03-14T00:00:00.000Z","formattedDate":"March 14, 2020","tags":[{"label":"OkHttp","permalink":"/website/blog/tags/ok-http"},{"label":"REST-Assured","permalink":"/website/blog/tags/rest-assured"},{"label":"Automation testing","permalink":"/website/blog/tags/automation-testing"},{"label":"API Testing","permalink":"/website/blog/tags/api-testing"}],"readingTime":1.365,"truncated":true,"authors":[{"name":"Mohammad Faisal Khatri","title":"Engineer by profession, poet by heart.","url":"https://github.com/mfaisalkhatri","imageURL":"https://github.com/mfaisalkhatri.png","key":"faisal"}],"frontMatter":{"title":"How to write API Tests using REST-Assured and OkHttp?","authors":"faisal","image":"./images/christopher-gower-unsplash.jpg","tags":["OkHttp","REST-Assured","Automation testing","API Testing"]},"nextItem":{"title":"Why is Maven project more preferable than simple Java project?","permalink":"/website/blog/2019/03/03/mavenproject-vs-javaproject"}},"content":"## :question: What is REST-Assured?\\n\\nREST Assured is a Java library that provides a domain-specific language (DSL) for writing powerful, maintainable tests for RESTful APIs.\\n\\n\x3c!--truncate--\x3e\\n\\n## :question: What is OkHttp?\\n\\nOkHTTP is an open source project designed to be an efficient HTTP client:\\n\\n- HTTP/2 support allows all requests to the same host to share a socket.\\n- Connection pooling reduces request latency (if HTTP/2 isn\u2019t available).\\n- Transparent GZIP shrinks download sizes.\\n- Response caching avoids the network completely for repeat requests.\\n\\n## :question: How to write API Tests using REST-Assured/ OkHttp?\\n\\nAs many of you know that REST-Assured and OkHttp are currently in demand for writing automation tests for APIs. I was learning about Rest-Assured and OkHttp, an idea just popped into my mind, why not save the code on github so it would serve as a learning material for beginners.\\n\\nHence, I created a repository on github(checkout the link below). It has API testing example codes for GET, POST, PUT, PATCH and DELETE requests using REST-Assured as well as OkHttp.\\n\\n[OkHttpRestAssuredExamples][githubrepo]\\n\\n## :bulb: REST-Assured or OkHttp?\\n\\nInteresting question! While I was running the tests, I found an interesting thing which caught my attention. The execution speed of OkHttp when compared to Rest-assured was far better.\\nCheckout the following blog for more details about REST-Assured and OkHttp performance with reference to execution time:\\n\\n[REST-Assured or OkHttp?] [wordpressblog]\\n\\nIn the end, I would like to mention that it all depends on the project and your requirement for choosing the framework to write and execute the tests. Everything has something unique, its up to you how you choose!!\\n\\n[wordpressblog]: https://iamfaisalkhatri.wordpress.com/2020/03/10/rest-assured-or-okhttp/\\n[githubrepo]: https://github.com/mfaisalkhatri/OkHttpRestAssuredExamples"},{"id":"/2019/03/03/mavenproject-vs-javaproject","metadata":{"permalink":"/website/blog/2019/03/03/mavenproject-vs-javaproject","editUrl":"https://github.com/WasiqBhamla/website/edit/main/blog/blog/2019-03-03-mavenproject-vs-javaproject/index.md","source":"@site/blog/2019-03-03-mavenproject-vs-javaproject/index.md","title":"Why is Maven project more preferable than simple Java project?","description":"Introduction","date":"2019-03-03T00:00:00.000Z","formattedDate":"March 3, 2019","tags":[{"label":"Maven","permalink":"/website/blog/tags/maven"},{"label":"CI","permalink":"/website/blog/tags/ci"},{"label":"Automation testing","permalink":"/website/blog/tags/automation-testing"}],"readingTime":3.44,"truncated":true,"authors":[{"name":"Mohammad Faisal Khatri","title":"Engineer by profession, poet by heart.","url":"https://github.com/mfaisalkhatri","imageURL":"https://github.com/mfaisalkhatri.png","key":"faisal"}],"frontMatter":{"title":"Why is Maven project more preferable than simple Java project?","authors":"faisal","image":"./images/discussion_overlay.png","tags":["Maven","CI","Automation testing"]},"prevItem":{"title":"How to write API Tests using REST-Assured and OkHttp?","permalink":"/website/blog/2020/03/14/restassured-okhttp"},"nextItem":{"title":"Introduction to GitHub Actions Workflows","permalink":"/website/blog/2019/02/23/github-actions-workflows"}},"content":"## Introduction\\n\\nHello Everyone,\\n\\nToday we will be discussing about maven and java projects.\\n\\nMany people are aware of Maven. But if I ask why would you prefer Maven based Java project over simple Java project?\\nMany may give just a normal answer like \u201cMaven has the ability to download dependencies automatically based on the dependencies block you put in respective maven project\u2019s pom.xml file\u201d.\\n\\n\x3c!--truncate--\x3e\\n\\nYes, that\u2019s true and its one of the major bonus point of maven based java project. But there are certain other benefits in maven which when utilised fully can help you a lot in managing and implementing your project.\\n\\nLet me describe you all the benefits of using maven on by one.\\n\\nSo, let\u2019s get started.\\n\\n![maven-vs-java-discussion](./images/discussion.jpg)\\n\\n## What is Maven?\\n\\nMaven is a powerful project management tool that is based on POM (project object model). It is used for projects build, dependency and documentation.\\n\\nHow Maven solves the following problems we face in project management:\\n\\n1. It adds all the necessary jars to the project as per the dependencies put ny user in pom.xml file.\\n1. Automatically creates the right project structure.\\n1. It makes a project easy to build.\\n1. It provides project information like log document, cross references sources, mailing list, dependency list, unit test reports, etc.\\n1. Works with CLI(Command line interface).\\n\\n> Following is the project structure of maven project, created in Eclipse IDE:\\n\\n![maven-project-structure](./images/maven_project_screenshot.png)\\n\\n## What is `pom.xml`?\\n\\nPOM is an acronym for Project Object Model. It contains information about project and configuration of the project such as dependencies, build directory, source directory, test source directory, plugins, goal, etc.\\nMaven reads pom.xml and then executes goal.\\n\\n:::note\\nFollowing is the sample of pom.xm file:\\n\\n```xml\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\"\\n\\txmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n\\txsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\n  <groupId>com.mfaisalkhatri</groupId>\\n  <artifactId>cucumberpractice</artifactId>\\n  <version>0.0.1-SNAPSHOT</version>\\n  <packaging>jar</packaging>\\n\\n  <dependencies>\\n  \\t<dependency>\\n      <groupId>junit</groupId>\\n      <artifactId>junit</artifactId>\\n      <version>4.12</version>\\n      <scope>test</scope>\\n    </dependency>\\n    <dependency>\\n  \\t\\t<groupId>org.seleniumhq.selenium</groupId>\\n  \\t\\t<artifactId>selenium-java</artifactId>\\n  \\t\\t<version>3.14.0</version>\\n  \\t</dependency>\\n  </dependencies>\\n  <build>\\n  \\t<plugins>\\n  \\t\\t<plugin>\\n  \\t\\t\\t<groupId>org.apache.maven.plugins</groupId>\\n  \\t\\t\\t<artifactId>maven-compiler-plugin</artifactId>\\n  \\t\\t\\t<version>3.7.0</version>\\n  \\t\\t\\t<configuration>\\n  \\t\\t\\t\\t<encoding>UTF-8</encoding>\\n  \\t\\t\\t\\t<source>1.8</source>\\n  \\t\\t\\t\\t<target>1.8</target>\\n  \\t\\t\\t\\t<compilerArgument>-Werror</compilerArgument>\\n  \\t\\t\\t</configuration>\\n  \\t\\t</plugin>\\n  \\t</plugins>\\n  </build>\\n\\n\\t<properties>\\n\\t\\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\\n\\t</properties>\\n</project>\\n```\\n\\n:::\\n\\nOnce you put dependencies inside the file and save it, maven searches for dependency in maven central repository and downloads the jar files accordingly for your project.\\n\\n## Maven CLI Commands\\n\\n- `mvn validate` : Validate the project is correct and all necessary information is available.\\n- `mvn compile` : Compile the source code of the project.\\n- `mvn test` : Test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed.\\n- `mvn package` : Take the compiled code and package it in its distributable format, such as a JAR.\\n- `mvn integration-test` : Process and deploy the package if necessary into an environment where integration tests can be run.\\n- `mvn verify` : Run any checks to verify the package is valid and meets quality criteria.\\n- `mvn install` : Install the package into the local repository, for use as a dependency in other projects locally.\\n- `mvn deploy` : Done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.\\n\\nThere are two other Maven life cycles of note beyond the default list above. They are as follows:\\n\\n- `mvn clean` : Cleans up artefacts created by prior builds.\\n- `mvn site` : Generates site documentation for this project.\\n\\nPhases are actually mapped to underlying goals. The specific goals executed per phase is dependent upon the packaging type of the project.\\n\\nYou can also run the above commands using life cycles commands for e.g.\\n\\n- `mvn clean install`\\n- `mvn clean test`\\n- `mvn clean verify`\\n\\nThe other major flaw in simple java project is that you cannot run it from CLI also, all the packaging and deploying tasks needs to be taken care manually which is a very tedious task.\\n\\nHope, you have got the basic knowledge of how maven works and why it would be more preferable than the simple java project where you have to do everything manually.\\n\\nKeep watching this site for more such interesting blogs.\\n\\nRegards,\\n\\nFaisal Khatri.\\n\\n## References\\n\\n- Maven commands have been taken from [Maven](https://maven.apache.org)."},{"id":"/2019/02/23/github-actions-workflows","metadata":{"permalink":"/website/blog/2019/02/23/github-actions-workflows","editUrl":"https://github.com/WasiqBhamla/website/edit/main/blog/blog/2019-02-23-github-actions-workflows/index.md","source":"@site/blog/2019-02-23-github-actions-workflows/index.md","title":"Introduction to GitHub Actions Workflows","description":"Introduction","date":"2019-02-23T00:00:00.000Z","formattedDate":"February 23, 2019","tags":[{"label":"GitHub Actions","permalink":"/website/blog/tags/git-hub-actions"},{"label":"CI","permalink":"/website/blog/tags/ci"},{"label":"DevOps","permalink":"/website/blog/tags/dev-ops"}],"readingTime":4.295,"truncated":true,"authors":[{"name":"Wasiq Amjad Bhamla","title":"Senior QA Consultant at Thoughtworks","url":"https://github.com/WasiqB","imageURL":"https://github.com/WasiqB.png","key":"wasiq"}],"frontMatter":{"title":"Introduction to GitHub Actions Workflows","authors":"wasiq","image":"./images/actions-bg.jpg","tags":["GitHub Actions","CI","DevOps"]},"prevItem":{"title":"Why is Maven project more preferable than simple Java project?","permalink":"/website/blog/2019/03/03/mavenproject-vs-javaproject"},"nextItem":{"title":"Beginners guide for Appium Automation for iOS apps","permalink":"/website/blog/2017/04/24/appium-automation-ios"}},"content":"## Introduction\\n\\nI have been using different Continuous Integration tools over the period of time for my open source projects on GitHub, like, Travis CI, Circle CI, Microsoft Azure pipelines, etc. But recently, when GitHub announced the beta launch of GitHub Actions, I was excited to try my hands on it. With this post I would like to share my experience using GitHub Actions.\\n\\n\x3c!--truncate--\x3e\\n\\n## Why to use GitHub Actions?\\n\\nWhen I compared what GitHub Actions has to offer as compared to other CI tools, I was even more tempted to try it out. The advantages which I feel makes GitHub Actions stand out is,\\n\\n| GitHub Actions                                         | Other CI tools                                                                                           |\\n| ------------------------------------------------------ | -------------------------------------------------------------------------------------------------------- |\\n| We have more control on the workflow which you create. | We don\'t have the control when we create the workflow. We are forced to use predefined blocks of config. |\\n| We can create workflow using a simple designer panel.  | There is no designer panel to create workflow.                                                           |\\n| The designer generates the workflow config for us.     | We need to manually dig in the docs to find the commands for the workflow we want to create.             |\\n\\nThese points were enough for me to motivate to try GitHub Actions.\\n\\n## How can you access GitHub Actions?\\n\\nAnyone who wish to use GitHub Actions need to [sign up for beta][sign-up] access.\\n\\n![Sign up page](./images/sing-up-page.jpg)\\n\\nYou can sign up for early access from this page.\\n\\n## After sign up, now what?\\n\\nAfter signing up, you need to wait for the mail from GitHub Team who will inform you via E-mail when your access is ready. Normally it will take under a week time but it all depends how many requests they have for accessing this feature. In my case it took more then a couple of weeks when I finally received this e-mail.\\n\\n![Access grant mail](./images/access-granted-mail.jpg)\\n\\n## You received the access, now where to find GitHub Actions?\\n\\nAfter the access is granted to you, you can find a **new Actions** tab in any of your GitHub repositories. Let\'s see the tab below.\\n\\n![New Action Tab](./images/action-tab.jpg)\\n\\n## What\'s in the Action Tab?\\n\\nIn Actions Tab, you can create your main workflow for your project. This is what you will see in the new tab.\\n\\n![Inside Action Tab](./images/inside-action.jpg)\\n\\n## Let\'s create your first GitHub Actions workflow.\\n\\nNow you can start creating your very first workflow from this window by clicking on `Create a new workflow` button. Once you do that you will see this page.\\n\\n![First Workflow](./images/first-workflow.jpg)\\n\\n### Step 1. Don\'t rename the file.\\n\\nUse the default workflow file name and path. Do not modify the file name. It should be `main.workflow`. This file is used by GitHub to execute all the workflows defined in it.\\n\\n### Step 2. Edit the workflow name.\\n\\nIn the designer, modify the workflow name which you want and select the event when you want this workflow to get executed. For this posts example, I will name it as `push-workflow` and select **Run on** as `push` as I want this workflow to run on push event.\\n\\nTo edit, click on `Edit` link in the first element in the designer. Same is shown below.\\n\\n![Name the Workflow](./images/name-workflow.jpg)\\n\\n### Step 3. Add first Action in Workflow.\\n\\nIn the designer panel, in the workflow box, there is a blue dot which you can use to drag down to create the first action in the workflow.\\n\\nWhen you drag the blue dot down, a new panel box will get created for your action and a small side panel will also open where you can design the action.\\n\\n![First Action](./images/first-action.jpg)\\n\\nIn this case, I will find `Maven` action and use it.\\n\\n### Step 4. Add command for your Maven action.\\n\\nWhen you select Maven action, a new panel will open in sidebar. Here you can set the label as `build`, put the maven command `mvn clean install` in `runs` field and put args `-DskipTests=true` in `args` field and click on Done.\\n\\n![Maven action command to Build](./images/cmd-maven-action.jpg)\\n\\nSimilarly, you can create many synchronous actions in a single workflow as you want.\\n\\n> I\'ll create one more action to run the tests after build.\\n\\n### Step 5. Commit the file after workflow is ready.\\n\\nOnce, your workflow is ready with required actions, you can commit the file using the commit button on the top.\\n\\nAfter commit, wait for a minute and check in the action tab, your workflow will get executed for any push you do. Same you can see in our example below,\\n\\n![Workflow result](./images/workflow-in-action.jpg)\\n\\n## Conclusion\\n\\nAs you can see with the example in this post, it is like a cake walk when we created our GitHub Action workflow. The possibilities of using actions is limitless as you can use many other ready-to-use actions as per your requirements. Also you can create your own action which can be used by others as well.\\n\\nSo that was all for Github Actions now, do keep checking this site for more such interesting topics.\\nIf you liked this post then share it in your network using the **SHARE** button below.\\n\\n[sign-up]: https://github.com/features/actions"},{"id":"/2017/04/24/appium-automation-ios","metadata":{"permalink":"/website/blog/2017/04/24/appium-automation-ios","editUrl":"https://github.com/WasiqBhamla/website/edit/main/blog/blog/2017-04-24-appium-automation-ios/index.md","source":"@site/blog/2017-04-24-appium-automation-ios/index.md","title":"Beginners guide for Appium Automation for iOS apps","description":"Introduction","date":"2017-04-24T00:00:00.000Z","formattedDate":"April 24, 2017","tags":[{"label":"Appium","permalink":"/website/blog/tags/appium"},{"label":"Appium iOS","permalink":"/website/blog/tags/appium-i-os"}],"readingTime":6.225,"truncated":true,"authors":[{"name":"Wasiq Amjad Bhamla","title":"Senior QA Consultant at Thoughtworks","url":"https://github.com/WasiqB","imageURL":"https://github.com/WasiqB.png","key":"wasiq"}],"frontMatter":{"title":"Beginners guide for Appium Automation for iOS apps","authors":"wasiq","image":"./images/appium-ios.jpeg","tags":["Appium","Appium iOS"]},"prevItem":{"title":"Introduction to GitHub Actions Workflows","permalink":"/website/blog/2019/02/23/github-actions-workflows"}},"content":"## Introduction\\n\\nI just completed setting up my Mac for Appium and wanted to share my findings with all. Unlike Windows,\xa0the steps to setting up Mac machine for iOS devices is not that easy. We will see the complete steps required in order to get us ready for iOS testing with Appium on Mac OS X.\\n\\n\x3c!--truncate--\x3e\\n\\n## What do we need for iOS Automation?\\n\\nNow we will see what steps we need to follow, so make sure you are following it properly.\\n\\n### Step 1: Needs Mac OS X\\n\\niOS Automation with Appium can only be done on Mac OS X machine so it is advisable to upgrade the OS to the latest version (which in my case is 10.12 Seirra). This can be done from the App Store.\\n\\n### Step 2: Create Apple Developer ID\\n\\nNow you need to create your [Apple Developer ID][apple]. This is required in later steps.\\n\\n### Step 3: Install XCode\\n\\nInstall the latest version of XCode available in App Store.\\n\\n### Step 4: Install Homebrew\\n\\nHomebrew is an easy to use utility to install packages on our Mac. You need to just enter the following command in the terminal, and hit return.\\n\\n```terminal\\n/usr/bin/ruby -e \\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\\"\\n```\\n\\n### Step 5: Install NodeJS\\n\\nInstead of using brew to install NodeJS, it is advisable to use installer package for the latest version available [here][node]\xa0for installing NodeJS. It is a simple user friendly installer which will guide you in installation process.\\n\\n### Step 6: Install Appium Command Line tool\\n\\nTo install latest version of Appium, you need to execute the following command in the terminal.\\n\\n```terminal\\n$ npm install -g appium\\n```\\n\\n### Step 7: Download Appium Desktop\\n\\nNext, download the latest version of Appium Desktop available [here][app]. We will see in detail how to use this tool\xa0later.\\n\\n### Step 8: Install ideviceinstaller\\n\\nInstall the latest version for `ideviceinstaller` by executing the following command in the terminal.\\n\\n```terminal\\n$ brew install ideviceinstaller\\n```\\n\\n### Step 9: Install ios-deploy\\n\\nInstall the latest version for `ios-deploy` by executing the following command in the terminal.\\n\\n```terminal\\n$ npm install -g ios-deploy\\n```\\n\\n### Step 10: Install\xa0carthage\\n\\nInstall the latest version for `carthage`\xa0by executing the following command in the terminal.\\n\\n```terminal\\n$ brew install carthage\\n```\\n\\n### Step 11:\xa0Navigate to the bin folder\\n\\nFrom terminal, run the following command to navigate to the bin folder where Appium is installed.\\n\\n```terminal\\n$ which appium\\n$ cd /to/the/path/returned/above\\n$ cd ..\\n```\\n\\n### Step 12: Install Appium XCUI Driver\\n\\nInstall the latest version of appium-xcui-driver by executing the following command in the terminal while being on the path from the previous step.\\n\\n```terminal\\n$ npm install -g appium-xcuitest-driver\\n```\\n\\n### Step 13: Finding device UDID\\n\\nConnect the device to the machine via USB, then open XCode. Navigate to the menu Window\xa0\u2192 Devices. Then select your device from left panel.\\n\\n![Device list](./images/xcode-device-manager.png)\\n\\nOnce you select your device, you should see the details as shown, You need to save the device identifier for later use.\\n\\n### Step 14: Open WebDriverAgent project in XCode\\n\\nIn order to open the project in XCode, execute the following set of commands in the terminal.\\n\\n```terminal\\n$ cd lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent\\n$ open WebDriverAgent.xcodeproj\\n```\\n\\n![Xcode General screen](./images/xcode-general-1.png)\\n\\nA window like this will open up.\\n\\n### Step 15: Enable Automatic\xa0Code Signing\\n\\nWe need to enable Automatic code signing and deploy the runner project on the device. This can be illustrated as below.\\n\\nFirst, we will select WebDriverAgentLib, and select Automatically manage signing. A pop-up will appear, click on **Enable Automatic**.\\n\\n![XCode General Auto sign screen](./images/xcode-general-auto-sign.png)\\n\\nOnce you enable Auto signing, you will see Team drop down, there you need to select your Apple Developer Account from the list.\\n\\n![XCode Auto sign team setting screen](./images/xcode-general-sign-team.png)\\n\\nThis is shown as illustrated above.\\n\\nNow, select WebDriverAgentRunner from the Target list, and enable Automatic signing as done earlier. But this time you\xa0will see an Error as shown below.\\n\\n![XCode Auto sign error screen](./images/xcode-general-sign.png)\\n\\nIn order to solve this Error, you need to modify\xa0Product Bundle Identifier\xa0under Build settings tab from com.facebook.WebDriverAgentRunner to something unique as shown below.\\n\\n![XCode Build screen](./images/xcode-build.png)\\n\\nNow, again go to General tab to check the Error. Now you will notice that the Error is gone. Same can be seen below.\\n\\n![XCode Auto sign succeeded](./images/xcode-general.png)\\n\\nNow once, all is set we need to build the project from within XCode by clicking the play button on the top.\\n\\n### Step 16: Building WebDriverAgent from Terminal\\n\\nBefore building the project, make sure the device is plugged in to the system and you have your device UDID with you,\xa0execute the following command in the terminal.\\n\\n```terminal\\n$ mkdir -p Resources/WebDriverAgent.bundle\\n$ ./Scripts/bootstrap.sh -d\\n```\\n\\nOnce above commands are executed, now execute following build command\\n\\n```terminal\\n$ xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination \'id=<Device Id>\' test\\n```\\n\\nFirst time when you build the project, a WebDriverAgentRunner app will be installed on the device, and the build will fail with following Error.\\n\\n```terminal\\nTesting failed:\\n Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted)\\n** TEST FAILED **\\n```\\n\\nTo solve this Error, we need to navigate to Settings\xa0\u21d2 General\xa0\u21d2 Device Management\xa0\u21d2 , and trust the developer as shown below.\\n\\n![iOS Trust developer screen](./images/trust-dev.png)\\n\\nWhen you click on Trust button, a pop-up confirmation dialog will appear as shown below.\\n\\n![iOS trust developer confirmation dialog](./images/trust-page.png)\\n\\nNow, again, if we build the project using the above command, the build will pass and a server will be started. We can confirm it by seeing the build output.\\n\\n```terminal\\n2017-04-24 16:41:06.470869 XCTRunner[459:77583] Running tests...\\n2017-04-24 16:41:07.379622 XCTRunner[459:77583] Continuing to run tests in the background with task ID 1\\nTest Suite \'All tests\' started at 2017-04-24 16:41:08.061\\nTest Suite \'WebDriverAgentRunner.xctest\' started at 2017-04-24 16:41:08.063\\nTest Suite \'UITestingUITests\' started at 2017-04-24 16:41:08.064\\nTest Case \'-[UITestingUITests testRunner]\' started.\\n t = 0.00s Start Test at 2017-04-24 16:41:08.067\\n t = 0.01s Set Up\\n2017-04-24 16:41:08.077064 XCTRunner[459:77658] [User Defaults] Failed to write value for key AutomationDisableFauxCollectionCells in CFPrefsPlistSource (Domain: com.apple.Accessibility, User: kCFPreferencesCurrentUser, ByHost: No, Container: (null)): setting preferences outside an application\'s container requires user-preference-write or file-write-data sandbox access, switching to read-only\\n2017-04-24 16:41:08.079603 XCTRunner[459:77583] Built at Apr 24 2017 15:57:52\\n2017-04-24 16:41:08.115981 XCTRunner[459:77583] ServerURLHere->http://192.168.0.104:8100<-ServerURLHere\\n```\\n\\nTo be 100% sure if all is well with setup until now, open a separate terminal window and execute following set of commands.\\n\\n```terminal\\n$ export DEVICE_URL=\'http://192.168.0.104:8100\'\\n$ export JSON_HEADER=\'-H \\"Content-Type: application/json;charset=UTF-8, accept: application/json\\"\'\\n$ curl -X GET $JSON_HEADER $DEVICE_URL/status\\n```\\n\\nYou should see the following output\\n\\n```terminal\\n$ curl: (6) Could not resolve host: application curl: (6) Could not resolve host: accept curl: (6) Could not resolve host: application { \\"value\\" : { \\"state\\" : \\"success\\", \\"os\\" : { \\"name\\" : \\"iOS\\", \\"version\\" : \\"10.0.2\\" }, \\"ios\\" : { \\"simulatorVersion\\" : \\"10.0.2\\", \\"ip\\" : \\"192.168.0.104\\" }, \\"build\\" : { \\"time\\" : \\"Apr 24 2017 15:57:52\\" } }, \\"sessionId\\" : \\"9F5D94DA-8F60-4A9F-9871-EFCE7F847D8E\\", \\"status\\" : 0 }\\n```\\n\\n## Conclusion\\n\\nPhew!! That was a lot of steps we did in this post. Congratulations on setting up your machine for iPhone Automation with Appium.\xa0In the next post, we will see how to identify Elements in the iPhone app and lot more. Until then,\xa0happy testing!!!\\n\\nIf you find this post useful, than share it with your colleagues and friends. If you have any questions or suggestion or feedback, you can share it with me in the comments section.\\n\\n## References\\n\\n[Appium Docs][appium]\\n\\n[appium]: https://github.com/imurchie/appium-xcuitest-driver/blob/isaac-rs/docs/real-device-config.md#basic-manual-configuration\\n[app]: https://github.com/appium/appium-desktop/releases\\n[node]: https://nodejs.org/en/download/\\n[apple]: https://developer.apple.com/"}]}')}}]);